import pandas as pd

os.makedirs("outputs", exist_ok=True)

samples = pd.read_csv("bam_processing_pipeline_table.tsv", delimiter='\t')
patients = samples.patient.unique().tolist()
qc_report_groups = samples.qc_report_group.unique().tolist()
patients = ["P2"]
sample_name_to_srr = pd.Series(samples.SRR.values, index=samples.sample_name).to_dict()


rule all:
    input:
        expand("bams/{sample}.final.bam", sample=samples.sample_name),
        "qc/fastq.multiqc_report.html",
        "qc/trimmed.multiqc_report.html",
        "qc/bam.multiqc_report.html"

####################################################
########### Format conversion
####################################################

def get_sra_file(name):
    srr = sample_name_to_srr[name]
    return("sra/%s.sra" % srr)

rule sra_to_fastq:
    input: lambda wildcards: get_sra_file(wildcards.sample)
    output: temp(["fastq/{sample}_1.fastq", "fastq/{sample}_2.fastq"])
    params:
        srr=lambda wildcards: sample_name_to_srr[wildcards.sample]
    threads: 6
    shell:
        """
        ~/programs/sraToolkit/sratoolkit.2.10.7-centos_linux64/bin/fasterq-dump --outdir fastq --split-3 {input}
        mv fastq/{params.srr}.sra_1.fastq fastq/{wildcards.sample}_1.fastq
        mv fastq/{params.srr}.sra_2.fastq fastq/{wildcards.sample}_2.fastq
        """

####################################################
########### Quality Control
####################################################

rule fastqc_1:
    input: "fastq/{sample}_{n}.fastq"
    output: ["qc/fastq/{sample}_{n}_fastqc.html", "qc/fastq/{sample}_{n}_fastqc.zip"]
    threads: 20
    shell: "~/programs/FastQC/fastqc -o qc/fastq -t 20 {input}"

rule multiqc_1:
    input: expand("qc/fastq/{sample}_{n}_fastqc.{ext}", sample=samples.sample_name, n=[1, 2], ext=["html", "zip"])
    output: "qc/fastq.multiqc_report.html"
    params:
        dir = "qc/fastq_multiqc"
    shell:
        """
        mkdir -p {params.dir}
        rm -rf {params.dir}/*
        multiqc -o {params.dir} qc/fastq
        cp {params.dir}/multiqc_report.html {output}
        """

rule trimming:
    input: ["fastq/{sample}_1.fastq", "fastq/{sample}_2.fastq"]
    output: temp(["fastq/trimmed/{sample}_1_val_1.fq", "fastq/trimmed/{sample}_2_val_2.fq"])
    shell:
        """
        trim_galore --paired -o fastq/trimmed {input}
        """

rule fastqc_2:
    input: "fastq/trimmed/{sample}_{n}_val_{n}.fq"
    output: ["qc/trimmed/{sample}_{n}_val_{n}_fastqc.html", "qc/trimmed/{sample}_{n}_val_{n}_fastqc.zip"]
    threads: 20
    shell: "~/programs/FastQC/fastqc -o qc/trimmed -t 20 {input}"

rule multiqc_2:
    input: expand("qc/trimmed/{sample}_{n}_val_{n}_fastqc.{ext}", sample=samples.sample_name, n=[1, 2], ext=["html", "zip"])
    output: "qc/trimmed.multiqc_report.html"
    params:
        dir = "qc/trimmed_multiqc"
    shell:
        """
        mkdir -p {params.dir}
        rm -rf {params.dir}/*
        multiqc -o {params.dir} qc/trimmed
        cp {params.dir}/multiqc_report.html {output}
        """

####################################################
########### Alignment and quality control
####################################################

rule bwa_mem:
    input: ["fastq/trimmed/{sample}_1_val_1.fq", "fastq/trimmed/{sample}_2_val_2.fq"]
    output: temp("bams/{sample}.sam")
    threads: 12
    params:
        r = lambda wildcards: "@RG\\tID:%s\\tPL:ILLUMINA\\tSM:{%s}\\tLB:{%s}" % (wildcards.sample, wildcards.sample, wildcards.sample)
    shell:
        """
        ~/programs/bwa-0.7.17/bwa mem \\
            -M -Y -t 12 \\
            -R "@RG\\tID:{wildcards.sample}\\tPL:ILLUMINA\\tSM:{wildcards.sample}\\tLB:{wildcards.sample}" \\
            ~/resources/hg38_for_bwa/hs38DH.fa {input} > {output}
        samtools quickcheck {output}
        """

rule sort_sam:
    input: "bams/{sample}.sam"
    output: temp("bams/{sample}.sorted.bam")
    threads: 10
    shell:
        """
        samtools sort -o {output} -O bam -@ 10 -m 8G {input}
        samtools quickcheck {output}
        """

rule qc3:
    input: "bams/{sample}.sorted.bam"
    output:
        stats = "qc/bam/{sample}.sorted_stats",
        fastqc = ["qc/bam/{sample}.sorted_fastqc.html", "qc/bam/{sample}.sorted_fastqc.zip"]
    threads: 20
    shell:
        """
        samtools stats {input} > {output.stats}
        ~/programs/FastQC/fastqc -o qc/bam -t 20 {input}
        """

rule multiqc_3:
    input: expand("qc/bam/{sample}.sorted_{file}", sample=samples.sample_name, file=["stats", "fastqc.html", "fastqc.zip"])
    output: "qc/bam.multiqc_report.html"
    params:
        dir = "qc/bam_multiqc"
    shell:
        """
        mkdir -p {params.dir}
        rm -rf {params.dir}/*
        multiqc -o {params.dir} qc/bam
        cp {params.dir}/multiqc_report.html {output}
        """

####################################################
########### Mark duplicates
####################################################

rule mark_duplicates:
    input: "bams/{sample}.sorted.bam"
    output:
        bam=temp("bams/{sample}.sorted.duplicates_marked.bam"),
        metric="temp/mark_duplicates_metrics/{sample}.metrics"
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk MarkDuplicates -I {input} -O {output.bam} -M {output.metric}
        samtools quickcheck {output.bam}
        """

#rule mark_duplicates:
#    input: "bams/{sample}.sorted.bam" #sam
#    output: "bams/{sample}.sorted.duplicates_marked.bam"
#    threads: 20
#    shell:
#        """
#        ~/programs/gatk-4.1.8.0/gatk MarkDuplicatesSpark -I {input} -O {output}
#        samtools quickcheck {output}
#        """

#rule set_tags:
#    required if MarkDuplicatesSpark is used, not necessary now.
#    input: "bams/{sample}.sorted.duplicates_marked.bam"
#    output: temp("bams/{sample}.sorted.duplicates_marked.tagged.bam")
#    threads: 6
#    shell:
#        """
#        ~/programs/gatk-4.1.8.0/gatk SetNmMdAndUqTags -I {input} -R ~/resources/hg38_for_bwa/hs38DH.fa -O {output}
#        samtools quickcheck {output}
#        """
#

rule base_recalibrator:
    input: "bams/{sample}.sorted.duplicates_marked.bam"
    output: "temp/base_recalibrator_data/{sample}.recal_data.table"
    params:
        ref="~/resources/hg38_for_bwa/hs38DH.fa",
        vcf1="~/resources/gatk/Homo_sapiens_assembly38.known_indels.vcf",
        vcf2="~/resources/gatk/Mills_and_1000G_gold_standard.indels.hg38.vcf"
    threads: 6
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk BaseRecalibrator \\
            -I {input} \\
            -R {params.ref} \\
            --known-sites {params.vcf1} --known-sites {params.vcf2} \\
            -O {output}
        """

rule apply_bsqr:
    input:
        bam="bams/{sample}.sorted.duplicates_marked.bam",
        recal_table="temp/base_recalibrator_data/{sample}.recal_data.table"
    params:
        ref="~/resources/hg38_for_bwa/hs38DH.fa"
    output: "bams/{sample}.final.bam"
    threads: 6
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk ApplyBQSR \\
            -I {input.bam} \\
            -R {params.ref} \\
            --bqsr-recal-file {input.recal_table} \\
            -O {output}
        samtools quickcheck {output}
        """

