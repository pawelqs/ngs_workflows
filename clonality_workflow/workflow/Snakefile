import pandas as pd
import glob

workdir: config["workdir"]

samples = pd.read_csv(config["manifest"], sep = "\t")
patients = samples.patient_id.unique().tolist()
patients_known_sex = samples.dropna().patient_id.unique().tolist()

sex = dict(zip(samples.sample_id, samples.sex))
bams = dict(zip(samples.sample_id, samples.bam))
tumor_samples = samples[samples.sample_type == "tumor"].sample_id.tolist()

x = samples[samples.sample_type == "tumor"][["patient_id", "sample_id"]] \
    .rename(columns={"sample_id": "tumor_sample"})
y = samples[samples.sample_type == "normal"][["patient_id", "sample_id"]] \
    .rename(columns={"sample_id": "normal_sample"})
x = pd.merge(x, y, on = "patient_id")
paired_normals = dict(zip(x.tumor_sample, x.normal_sample))

mutect_files = samples.loc[samples.mutect2 != ".", ["patient_id", "mutect2"]]
mutect_files = dict(zip(mutect_files.patient_id, mutect_files.mutect2))


include: "rules/ascat.smk"
include: "rules/ascat_sc.smk"
include: "rules/cnvkit.smk"
include: "rules/facets.smk"
include: "rules/misc.smk"
include: "rules/phylowgs.smk"
include: "rules/pyclone-vi.smk"
include: "rules/titancna.smk"


rule all:
    input:
        expand("{bam}.bai", bam=samples.bam.tolist()),
        expand("ascat/{sample}.done", sample=tumor_samples) if "ascat" in config["tools"] else [] 
        # expand("bcftools/{patient}.sex", patient=patients)
        # expand("cnvkit/{patient}/done", patient=patients_known_sex),
        # expand("facets/{sample}.csv", sample=tumor_samples)
        # expand("ASCAT_sc/{patient}.Rds", patient=patients)
        # expand("pyclone_facets/{patient}.pyvi-output.tsv", patient=patients)
        # expand("titan_optimal/{sample}/{sample}.segs.tsv", sample=tumor_samples),
        # expand("phylowgs_{cnv_method}/{patient}.Rds", cnv_method=["titan", "facets"], patient = patients),
        # expand("pyclone_{cnv_method}/{patient}.table_{table}.tsv", cnv_method=["titan", "facets"], patient=patients, table=["cluster", "loci"]),
        # expand("pyclone_{cnv_method}/{patient}/tried.plot", cnv_method=["titan", "facets"], patient=patients)


rule index_bam:
    input: "{file}.bam"
    output: "{file}.bam.bai"
    conda: "envs/samtools_env.yml"
    shell: "samtools index {input}"


# To check how many mutations will be kept for certain options, workflow/scripts/sim_vcf_filtering.sh may be used
rule filter_avcf:
    input: lambda wildcards: mutect_files[wildcards.patient]
    output: "filtered_vcf/{patient}.vcf"
    params:
        temp_vcf = "filtered_vcf/{patient}.temp.vcf",
        tumor_samples = lambda wildcards: ",".join(patients_pyclone[wildcards.patient]["tumor_samples"])
    shell:
        """
        bcftools view -s {params.tumor_samples} -Ou {input} |
            bcftools view \\
                -O v \\
                -i 'INFO/CSQ !~"intron_variant" & INFO/CSQ !~"synonymous_variant" &
                    INFO/CSQ !~"intergenic_variant" & INFO/CSQ !~"non_coding" & 
                    MIN(INFO/MMQ) > 50 & AVG(FORMAT/DP) > 10' > {params.temp_vcf}
        grep '^##' {params.temp_vcf} > {output}
        grep '^#CHROM' {params.temp_vcf} >> {output}
        grep -v  '^#'  {params.temp_vcf} | awk '$10 !~ /\.\/\./ && $9 ~ /:AD:/' >> {output}
        rm {params.temp_vcf}
        """
